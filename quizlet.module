<?php
/**
 * @file
 * This module is developed for getting quiz informations from quizlet.com.
 *
 * TODOS: 
 * - Add Option to Create Multiple Instances of Same Vocabulary List IDs
 */
/**
* Implementation of hook_init()
* 
*/
function quizlet_init() {
  drupal_add_css(drupal_get_path('module', 'quizlet') .'/css/quizlet.css'); 
  drupal_add_js(drupal_get_path('module', 'quizlet') .'/js/quizlet.js'); 
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'quizlet') {
    drupal_goto('quizlet/search');
  }
}
/**
* Implementation of hook_help()
*/
function quizlet_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#quizlet':
      return t('General settings for drupal.');
  }
}
/**
* implementation of hook_perm()
* 
*/
function quizlet_perm() {
  return array('administrator quizlet', 'quizlet search', 'quizlet save', 'create quizlet content', 'delete own quizlet content', 'delete any quizlet content', 'edit any quizlet content', 'edit own quizlet content', 'view flashcards');
}
/**
 * Implementation of hook_access().
 */
function quizlet_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create quizlet content', $account) ? TRUE : NULL;
    case 'update':
      return user_access('edit any quizlet content', $account) || (user_access('edit own quizlet content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any quizlet content', $account) || (user_access('delete own quizlet content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}
/**
* implementation of hook_menu()
* 
*/
function quizlet_menu() {
  $items['admin/settings/quizlet'] = array(
    'title' => t('Quizlet Settings'),
    'description' => t('Quizlet Settings Page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_api_form'),
    'access arguments' => array('administrator quizlet'),
    'file' => 'quizlet.module',
  );
  $items['quizlet/search'] = array(
    'title' => t('Quizlet Search'),
    'description' => t('Quizlet Search Page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_search_form'),
    'access arguments' => array('quizlet search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quizlet.module',
  );
  $items['quizlet'] = array(
    'title' => t('Quizlet Saved Lists'),
    'description' => t('Quizlet Lists Page'),
    'page callback' => 'quizlet_lists',
    'access arguments' => array('quizlet search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quizlet.module',
  );
  $items['quizlet/list/%'] = array(
    'title' => t('Quizlet Lists'),
    'description' => t('Quizlet Lists Page'),
    'page callback' => 'quizlet_term_lists',
    'page arguments' => array(2),
    'access arguments' => array('quizlet search'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  $items['quizlet/save/%'] = array(
    'title' => t('Quizlet Save'),
    'description' => t('Quizlet Lists Save'),
    'page callback' => 'quizlet_terms_save',
    'page arguments' => array(2),
    'access arguments' => array('quizlet save'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  $items['node/%node/learn'] = array(
    'title' => t('Learn'),
    'description' => t('Learn page'),
    'page callback' => 'quizlet_terms_embeddedcards',
    'page arguments' => array(1, 2),
    'access callback' => 'quizlet_flashcards_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
  $items['node/%node/scatter'] = array(
    'title' => t('Scatter'),
    'description' => t('Scatter page'),
    'page callback' => 'quizlet_terms_embeddedcards',
    'page arguments' => array(1, 2),
    'access callback' => 'quizlet_flashcards_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
$items['node/%node/flashcards'] = array(
  'title' => t('Flashcards'),
  'description' => t('Flashcard page'),
  'page callback' => 'quizlet_terms_embeddedcards',
  'page arguments' => array(1, 2),
  'access callback' => 'quizlet_flashcards_access',
  'access arguments' => array(1),
  'type' => MENU_LOCAL_TASK,
  'file' => 'quizlet.module',
);
  return $items; 
} 
/**
* Settings API key form
* 
* @param mixed $form_state
*/
function quizlet_api_form($form_state = array()) {
  $form['api_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('Developer Key'),
  );
  $form['api_key']['quizlet_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_api_key', ''),
    '#description' => t('Enter developer API key for quizlet.'),
  );
  $form['visiblity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Visibility Settings'),
  );
  $form['visiblity']['quizlet_show_creator'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Creator'),
    '#default_value' => variable_get('quizlet_show_creator', ''),  
  );
  $form['visiblity']['quizlet_show_date_created'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Date Created'),
    '#default_value' => variable_get('quizlet_show_date_created', ''),  
  );
  $form['visiblity']['quizlet_show_last_modified'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Last Modified'),
    '#default_value' => variable_get('quizlet_show_last_modified', ''),  
  );
  return system_settings_form($form);
}
/**
* Quizlet Search Form
* 
* @param mixed $form_state
*/
function quizlet_search_form($form_state = array(), $page=1) {
  global $user;
  $key = variable_get('quizlet_api_key', '');
  $keywords = $_GET['keywords'];
  $has_images = $_GET['has_images'] ? TRUE : FALSE;
  $sort =  $_GET['sort'] ? $_GET['sort'] : '';
  $criteria = '';
  if ($_GET['page']) {
    $criteria .= '&page='. ($_GET['page']+1);
  } 
  if ($has_images) {
    $criteria .= '&images_only=on';
  }
  if ($sort) {
    $criteria .= '&sort='. $sort; 
  }
  $url = 'http://api.quizlet.com/1.0/sets?dev_key='. $key .'&q='. str_replace(' ', '+', $keywords) .'&whitespace=off'. $criteria;
  if (!$response = json_decode(quizlet_api_request($url, array()), TRUE)) {
    drupal_set_message(t("Cannot communicate to server. Please try again."), 'warning');
  }
  else {
    $form_state['storage']['data'] = $response['sets'];
    $form_state['storage']['keywords']  = $keywords;
    $form_state['storage']['has_images']  = $has_images; 
    $form_state['storage']['sort'] = $sort; 
  }
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Keyword'),
    '#required' => TRUE,
    '#default_value' => $form_state['storage']['keywords'],
    '#description' => t('Enter keyword to search on quizlet.'),
    '#size' => ($page ? 60 : 25),
  );
  $form['has_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only Show Lists with Images'),
    '#default_value' => $form_state['storage']['has_images'],
  );
  $options = array('most_recent' => t('Most Recent'), 'alphabetical' => t('Alphabatical'), 'most_studied' => t('Most Studied'));
  $form['sort'] = array(
    '#type' => 'radios',
    '#title' => t('Sort By'),
    '#options' => $options,
    '#default_value' => $form_state['storage']['sort'],
  );
  $form['search'] = array(
    '#type' => 'submit',
    '#title' => t('Search'),
    '#value' => t('Search'),
  );
  if (!empty($form_state['storage']['data'])) {
    $header = array(t('Title'), t('Term Count'));
    if (variable_get('quizlet_show_creator', '')) {
      $header[] = t('Creator'); 
    }
    if (variable_get('quizlet_show_date_created', '')) {
      $header[] = t('Created'); 
    }
    if (variable_get('quizlet_show_last_modified', '')) {
      $header[] = t('Last Modified'); 
    }
    if (user_access('quizlet save', $user)) {
      $header[] =  t('Save'); 
    }
    $rows = array();
    foreach ($form_state['storage']['data'] as $key => $value) {
      $row = array();
      $row[] = l(htmlspecialchars_decode($value['title'], ENT_QUOTES), 'quizlet/list/'. $value['id'], array('query' => 'keywords='. $form_state['storage']['keywords'] . $criteria));
      $row[] = $value['term_count'];  
      if (variable_get('quizlet_show_creator', '')) { 
        $row[] = $value['creator'];
      }
      if (variable_get('quizlet_show_date_created', '')) { 
        $row[] = date('m-d-Y H:i', $value['created']); 
      } 
      if (variable_get('quizlet_show_last_modified', '')) {   
        $row[] = date('m-d-Y H:i', $value['last_modified']);
      }
      $nid = db_result(db_query("select nid from {quizlet_lists} where quizlet_id='%d'", $value['id']));       
      if (user_access('quizlet save', $user)) { 
        $row[] = l(($nid ? t('Update') : t('Save')), 'quizlet/save/'. $value['id'], array('query' => 'keywords='. $form_state['storage']['keywords'] . $criteria));
      }
      $rows[] = $row;
    }
    if (!empty($rows)) {
      $output = theme('table', $header, $rows); 
      global $pager_page_array, $pager_total;
      $pager_total[0] = ceil($response['total_results']/30);
      $pager_page_array[0] = isset($_GET['page']) ? $_GET['page'] : 0;
      $output .= theme('pager', 30);
    }
    else {
      $output = t('No results found.');
    }
  }
  elseif (!empty($form_state['storage']['keywords'])) {
    $output = t('No results found.');  
  }
  $output .= quizlet_powered_by(); 
  if ($page) {
    $form['data'] = array(
      '#type' => 'item',
      '#value' => $output
    );
  }
  $form['#method'] = 'GET';
  $form['#action'] = url('quizlet/search');
  return $form;
}
function quizlet_search_form_submit($form, &$form_state) {
  $key = variable_get('quizlet_api_key', '');
  $keywords = $form_state['values']['keywords'];
  $has_images = $_GET['has_images'] ? TRUE : FALSE;
  $url = 'http://api.quizlet.com/1.0/sets?dev_key='. $key .'&q='. str_replace(' ', '+', $keywords) .'&whitespace=off';
  if (!$response = json_decode(quizlet_api_request($url, array()), TRUE)) {
    drupal_set_message(t("Cannot communicate to server"), 'error');
  }
  else {
    $form_state['storage']['data'] = $response['sets'];
    $form_state['storage']['keywords']  = $keywords;
    $form_state['storage']['has_images']  = $has_images;
  }
}
/**
* Sending API Request
* 
* @param mixed $url
* @param mixed $options
*/
function quizlet_api_request($url, $options = array()) {
  $result = drupal_http_request($url, $options);
  if ($result->code == 200) {
    return $result->data;
  }
  return FALSE;
}
function quizlet_term_lists($id) {
  $criteria = '';
  if ($_GET['page']) {
    $criteria .= '&page='. ($_GET['page']+1);
  } 
  if ($_GET['has_images']) {
    $criteria .= '&images_only=on';
  }
  if ($_GET['sort']) {
    $criteria .= '&sort='. $_GET['sort']; 
  }
  $key = variable_get('quizlet_api_key', ''); 
  $url = 'http://api.quizlet.com/1.0/sets?dev_key='. $key .'&&q=ids:'. $id .'&extended=on&whitespace=off';
  $backlink = l(t('Back to search results'), 'quizlet/search', array('query' => 'keywords='. $_GET['keywords'] . $criteria));
  $nid = db_result(db_query("select nid from {quizlet_lists} where quizlet_id='%d'", $id));       
  $savelink = l(($nid ? t('Update this list') : t('Save this list')), 'quizlet/save/'. $id, array('query' => 'keywords='. $_GET['keywords'] . $criteria));
  if (!$response = json_decode(quizlet_api_request($url, array()), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    return $backlink;
  }
  else {
    $rows = array();
    $header  = array();
    foreach ($response['sets']['0']['terms'] as $key => $value) {
      $row = array();
      foreach ($value as $k => $v) {
        $row[] = $v;
      }
      $rows[] = $row;
    }
    return theme_render_template(
            drupal_get_path('module', 'quizlet') .'/templates/quizlet_list.tpl.php', 
            array(
             'title' => $response['sets']['0']['title'],
             'description' => $response['sets']['0']['description'],
             'term_count' => $response['sets']['0']['term_count'],
             'terms' => theme('table', $header, $rows),
             'backlink' => $backlink,
             'savelink' => $savelink 
           ));
   }  
}
/**
* Implementation of hook_node_info().
*/
function quizlet_node_info() {
  return array(
    'quizlet' => array(
      'name' => t('Quizlet List'),
      'module' => 'quizlet',
      'description' => t("Custom content type to store quizlet quizlet lists"),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'body_label' => t('Description'),
      'has_body' => TRUE,
    )
  );
}
/**
* Implementation of hook_form().
*/
function quizlet_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['quizlet_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet ID'),
    '#default_value' => $node->quizlet_id,
    '#required' => TRUE,
    // '#access' => FALSE,
	'#disabled' => TRUE,
  );
  $form['quizlet_data'] = array(
    '#type' => 'textarea',
    '#title' => t('Quizlet Data'),
    '#default_value' => $node->quizlet_data,
    '#required' => FALSE,
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );
  $form['filter'] = filter_form($node->format);
  return $form;
}
/**
 * Implementation of hook_load().
 */
function quizlet_load($node) {
  global $user;
  $quizlet = db_fetch_object(db_query("SELECT quizlet_id, quizlet_data FROM {quizlet_lists} WHERE nid = %d", $node->nid));
  return $quizlet;
}
/**
 * Implementation of hook_insert().
 */
function quizlet_insert($node) {
  db_query("INSERT INTO {quizlet_lists} (nid, quizlet_id, quizlet_data) VALUES ('%d', '%d', '%s')", $node->nid, $node->quizlet_id, $node->quizlet_data);
}
/**
 * Implementation of hook_update().
 */
function quizlet_update($node) {
  db_query("UPDATE {quizlet_lists} SET quizlet_data = '%s' WHERE nid = '%d'", $node->quizlet_data, $node->nid);
}
/**
 * Implementation of hook_delete().
 */
function quizlet_delete($node) {
  db_query("DELETE FROM {quizlet_lists} WHERE nid = %d", $node->nid);  
}
/**
 * Implementation of hook_view().
 *
 * @param $block
 */
function quizlet_view($node, $teaser = FALSE, $page = FALSE, $block = FALSE) {
  global $user;
  $node = node_prepare($node, $teaser);
  $node->content['quizlet_id'] = array(
    '#value' => '<b>Quizlet ID:</b><br>'. $node->quizlet_id .'<br>', 
    '#weight' => 1,
  );
  $quizlet_data = unserialize($node->quizlet_data);
  $rows = array();
  $header  = array();
  foreach ($quizlet_data as $key => $value) {
    $row = array();
    foreach ($value as $k => $v) {
      $row[] = $v;
    }
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows); 
  $node->content['quizlet_data'] = array(
    '#value' => '<div class="quizet_list"><div class="quizlet_terms_title"><b>'. t('Terms') .' : </b><a href="javascript:void(0);" id="quizlet_images">Hide Images</a></div>' . $output .'</div>'. drupal_get_form('quizlet_selection_cards', $node) . quizlet_powered_by(), 
    '#weight' => 3,
  );
  return $node;
}
/**
* Save quizlet lists
* 
* @param mixed $id
*/
function quizlet_terms_save($id) {
  global $user;
  $criteria = '';
  if ($_GET['page']) {
    $criteria .= '&page='. ($_GET['page']+1);
  } 
  if ($_GET['has_images']) {
    $criteria .= '&images_only=on';
  }
  if ($_GET['sort']) {
    $criteria .= '&sort='. $_GET['sort']; 
  }
  $key = variable_get('quizlet_api_key', ''); 
  $url = 'http://api.quizlet.com/1.0/sets?dev_key='. $key .'&&q=ids:'. $id .'&extended=on&whitespace=off';
  if (!$response = json_decode(quizlet_api_request($url, array()), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    drupal_goto('quizlet/search', 'keywords='. $_GET['keywords'] . $criteria);
  }
  else {
    $nid = db_result(db_query("select nid from {quizlet_lists} where quizlet_id='%d'", $id));
    if ($nid) {
      $node = node_load($nid);
      $node->changed = time();
      $node->title = htmlspecialchars_decode($response['sets']['0']['title'], ENT_QUOTES);
      $node->body = $response['sets']['0']['description'];
      $node->quizlet_data = serialize($response['sets']['0']['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet list updated successfully.'));
    }
    else {
      $node = new stdClass();
      $node->type = 'quizlet';
      $node->status = 1;
      $node->uid = $user->uid;
      $node->created = time();
      $node->changed = time();
      $node->title = htmlspecialchars_decode($response['sets']['0']['title'], ENT_QUOTES);
      $node->body = $response['sets']['0']['description'];
      $node->quizlet_data = serialize($response['sets']['0']['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet list saved successfully.'));  
    }
    drupal_goto('node/'. $node->nid);  
  }
}
/**
* Saved lists
* 
*/
function quizlet_lists() {
  global $user;
  drupal_set_title(t('Most Recently Saved Quizlet Vocabulary Lists'));
  $sql = "select nid from {node} where type='quizlet'";
  $cnt_sql = "select count(*) from {node} where type='quizlet'";
  $header = array(array('data' => t('Title'), 'field' => 'title'), array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'), array('data' => t('Changed'), 'field' => 'changed'));
  if (user_access('delete any quizlet content', $user)) {
    $header[] =  t('Delete'); 
  }
  $sql .= tablesort_sql($header); 
  $query = pager_query($sql, 30, 0, $cnt_sql);
  $rows = array();
  while ($result = db_fetch_object($query)) {
    $row = array();
    $node = node_load($result->nid); 
    $row[] = l($node->title, 'node/'. $result->nid);
    $row[] = date('m-d-Y H:i', $node->created);   
    $row[] = date('m-d-Y H:i', $node->changed);
    if (user_access('delete any quizlet content', $user)) {  
      $row[] = l(t('Delete'), 'node/'. $node->nid .'/delete', array('query' => 'destination=quizlet')); 
    }
    $rows[] = $row;
  }
  $output = theme('table', $header, $rows);
  $output .= theme('pager', 30);
  $output .= quizlet_powered_by();
  return $output;
}
/**
* Powered by Quizlet
*/
function quizlet_powered_by() {
  return '<div class="quizlet_link"><a href="http://quizlet.com/"><b>Powered by Quizlet.com</b></a></div>';
}
/**
* Access to flashcard nodes
* 
* @param mixed $node
*/
function quizlet_flashcards_access($node) {
  global $user;
  if ($node->type == 'quizlet' && user_access('view flashcards', $user)) {
    return TRUE;  
  }
  else {
    return FALSE; 
  }
}
/**
* Quizlet embedded charts
* 
* @param mixed $node
* @param mixed $type
*/
function quizlet_terms_embeddedcards($node, $type) {
  if ($type=='learn') {
    $url = 'http://quizlet.com/'. $node->quizlet_id .'/learn/embed/?hideLinks';  
    $height = 480;
  }
  elseif ($type=='scatter')   {
    $url = 'http://quizlet.com/'. $node->quizlet_id .'/scatter/embed/?hideLinks';  
    $height = 520; 
  }
  else {
	$url = 'http://quizlet.com/'. $node->quizlet_id .'/familiarize/embed/?hideLinks';  
    $height = 350;
}
  return theme_render_template(drupal_get_path('module', 'quizlet') .'/templates/embedded_cards.tpl.php', array('url' => $url, 'height' => $height));
}
function quizlet_selection_cards($form_state = array(), $node) {
  $flashcard = url('node/'. $node->nid .'/flashcards', array('absolute' => TRUE));
  $learn = url('node/'. $node->nid .'/learn', array('absolute' => TRUE));
  $scatter = url('node/'. $node->nid .'/scatter', array('absolute' => TRUE));
  $options = array('' => t('Please select'), $flashcard => t('Flashcard'), $learn => t('Learn'), $scatter => t('Scatter'));
  $form['select_card'] = array(
    '#type' => 'select', 
    '#title' => t('Select card'),
    '#options' => $options,
  );
  return $form;
}
/**
* Implementation of hook_block() Keyword Search Block
* 
* @param mixed $op
* @param mixed $delta
* @param mixed $edit
*/
function quizlet_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Search Vocabulary Lists by Keyword'), 
      'cache' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE, 
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => t('Keyword Search for Vocabulary Lists'), 
          'content' => drupal_get_form('quizlet_search_form', 0),
        );
        break;
    }
    return $block;
  }
}
