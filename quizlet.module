<?php
/**
 * @file
 * This module is developed for getting quiz informations from quizlet.com.
 *
 * TODOS: 
 * - Add Option to Create Multiple Instances of Same Vocabulary List IDs
 */
 
/**
* Quizlet Custom path.
*/
define('QUIZLET_PATH', variable_get('quizlet_custom_path', 'quizlet'));

/**
 * Implements hook_init().
 * 
 */
function quizlet_init() {  
  drupal_add_css(drupal_get_path('module', 'quizlet') . '/css/quizlet.css'); 
  drupal_add_js(drupal_get_path('module', 'quizlet') . '/js/quizlet.js'); 
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'quizlet') {
    drupal_goto(QUIZLET_PATH . '/search');
  }
}
/**
 * Implements hook_help().
 */
function quizlet_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#quizlet':
      return t('General settings for drupal.');
  }
}
/**
 * Implements hook_permission().
 * 
 */
function quizlet_permission() {
  return array(
    'administrator quizlet' => array(
      'title' => t('Administer quizlet'), 
      'description' => t('Perform administration tasks for quizlet module.'),
    ), 
    'quizlet search' => array(
      'title' => t('Quizlet search'), 
      'description' => t('Perform search tasks for quizlet module.'),
    ),
    'quizlet save' => array(
      'title' => t('Quizlet save'), 
      'description' => t('Perform saving quizlet lists.'),
    ),
    'create quizlet content' => array(
      'title' => t('Create quizlet content'),
      'description' => t('Create new quizlet nodes.'),
    ),
    'delete own quizlet content' => array(
      'title' => t('Delete quizlet content'),
      'description' => t('Perform delete operation on quizlet nodes.'),
    ),
    'delete any quizlet content' => array(
      'title' => t('Delete any quizlet content'),
      'description' => t('Perform delete operation on all quizlet nodes.'),
    ),
    'edit any quizlet content' => array(
      'title' => t('Edit any quizlet content'),
      'description' => t('Perform edit operation on any quizlet nodes.'),
    ),
    'edit own quizlet content' => array(
      'title' => t('Edit own quizlet content'),
      'description' => t('Perform edit operation on own quizlet nodes.'),
    ),
    'view flashcards' => array(
      'title' => t('View flashcards'), 
      'description' => t('View flashcards.'),
    ),
  );
}
/**
 * Implements hook_node_access().
 * 
 * @param mixed $node
 * @param mixed $op
 * @param mixed $account
 */
function quizlet_node_access($node, $op, $account) {
  switch ($op) {
    case 'create':
      if (user_access('create quizlet content', $account)) {
        return NODE_ACCESS_ALLOW; 
      }
      else {
        return NODE_ACCESS_IGNORE;  
      }
    case 'update':
      if (user_access('edit any quizlet content', $account) || (user_access('edit own quizlet content', $account) && ($node->uid == $account->uid))) {
        return NODE_ACCESS_ALLOW; 
      }
      else {
        return NODE_ACCESS_IGNORE; 
      }
    case 'delete':
      if (user_access('delete any quizlet content', $account) || (user_access('delete own quizlet content', $account) && ($node->uid == $account->uid))) {
        return NODE_ACCESS_ALLOW; 
      }
      else {
        return NODE_ACCESS_IGNORE;
      }
  }
}
/**
 * Implements hook_menu().
 * 
 */
function quizlet_menu() {
  $items['admin/config/services/quizlet'] = array(
    'title' => 'Quizlet Settings',
    'description' => 'Quizlet Settings Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_api_form'),
    'access arguments' => array('administrator quizlet'),
    'file' => 'quizlet.module',
  );
  $items['admin/config/services/quizlet/keys'] = array(
    'title' => 'Quizlet Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/quizlet/token'] = array(
    'title' => 'Quizlet Token',
    'description' => 'Quizlet Token',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_api_token_form'),
    'access arguments' => array('administrator quizlet'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/search'] = array(
    'title' => variable_get('quizlet_custom_search_title', 'Quizlet Search'),
    'description' => 'Quizlet Search Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_search_form'),
    'access arguments' => array('quizlet search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH] = array(
    'title' => variable_get('quizlet_custom_search_breadcrumb', 'Quizlet Saved Lists.'),
    'description' => 'Quizlet Lists Page',
    'page callback' => 'quizlet_lists',
    'access arguments' => array('quizlet search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/list/%'] = array(
    'title' => 'Quizlet Lists',
    'description' => 'Quizlet Lists Page',
    'page callback' => 'quizlet_term_lists',
    'page arguments' => array(2),
    'access arguments' => array('quizlet search'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/save/%'] = array(
    'title' => 'Quizlet Save',
    'description' => 'Quizlet Lists Save',
    'page callback' => 'quizlet_terms_save',
    'page arguments' => array(2),
    'access arguments' => array('quizlet save'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  $items['node/%node/learn'] = array(
    'title' => 'Learn',
    'description' => 'Learn page',
    'page callback' => 'quizlet_terms_embeddedcards',
    'page arguments' => array(1, 2),
    'access callback' => 'quizlet_flashcards_viewaccess',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
  $items['node/%node/scatter'] = array(
    'title' => 'Scatter',
    'description' => 'Scatter page',
    'page callback' => 'quizlet_terms_embeddedcards',
    'page arguments' => array(1, 2),
    'access callback' => 'quizlet_flashcards_viewaccess',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
  $items['node/%node/flashcards'] = array(
    'title' => 'Flashcards',
    'description' => 'Flashcard page',
    'page callback' => 'quizlet_terms_embeddedcards',
    'page arguments' => array(1, 2),
    'access callback' => 'quizlet_flashcards_viewaccess',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/group'] = array(
    'title' => 'Quizlet Group',
    'description' => 'Quizlet Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quizlet_group_form'),
    'access arguments' => array('quizlet group'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/group/list/%'] = array(
    'title' => 'Quizlet Group Lists',
    'description' => 'Quizlet Group Lists Page',
    'page callback' => 'quizlet_group_term_lists',
    'page arguments' => array(3),
    'access arguments' => array('quizlet search'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  $items[QUIZLET_PATH . '/group/save/%'] = array(
    'title' => 'Quizlet Group Save',
    'description' => 'Quizlet Group Lists Save',
    'page callback' => 'quizlet_group_terms_save',
    'page arguments' => array(3),
    'access arguments' => array('quizlet save'),
    'type' => MENU_CALLBACK,
    'file' => 'quizlet.module',
  );
  return $items; 
} 
/**
 * Settings API key form
 * 
 * @param mixed $form_state
 */
function quizlet_api_form($form, &$form_state) {
  $form['api_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('Developer Key'),
  );
  $form['api_key']['quizlet_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet Client ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_api_key', ''),
    '#description' => t('Quizlet Client ID.'),
  );
  $form['api_key']['quizlet_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_secret_key', ''),
    '#description' => t('Secret Key.'),
  );
  $form['visiblity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Visibility Settings'),
  );
  $form['visiblity']['quizlet_show_creator'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Creator'),
    '#default_value' => variable_get('quizlet_show_creator', ''),  
  );
  $form['visiblity']['quizlet_show_date_created'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Date Created'),
    '#default_value' => variable_get('quizlet_show_date_created', ''),  
  );
  $form['visiblity']['quizlet_show_last_modified'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Last Modified'),
    '#default_value' => variable_get('quizlet_show_last_modified', ''),  
  );
  $form['quizlet_multiple_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Creating Multiple Copies of Same Quizlet Vocabulary List'),
    '#default_value' => variable_get('quizlet_multiple_copy', ''),  
  );
  $form['quizlet_custom_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet custom path'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_custom_path', 'quizlet'),
    '#description' => t('Add custom path like "flashcards", "testpath" instead of "quizlet" if you want to do that.'),
  );
  $form['quizlet_custom_search_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet custom search title'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_custom_search_title', 'Quizlet Search'),
    '#description' => t('Enter quizlet search page title.'),
  );
  $form['quizlet_custom_list_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet list page title'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_custom_list_title', 'Most Recently Saved Quizlet Vocabulary Lists'),
    '#description' => t('Enter quizlet list page title.'),
  );
  $form['quizlet_custom_search_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet search field description'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_custom_search_description', 'Enter keyword to search on quizlet.'),
    '#description' => t('Enter quizlet search field description.'),
  );
  $form['quizlet_custom_search_breadcrumb'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet search breadcrumb title'),
    '#required' => TRUE,
    '#default_value' => variable_get('quizlet_custom_search_breadcrumb', 'Quizlet Saved Lists'),
    '#description' => t('Enter quizlet search breadcrumb title.'),
  );
  $form['#submit'][] = 'quizlet_api_form_submit';
  return system_settings_form($form);
}
/**
 * 
 * API form Submit
 * @param mixed $form
 * @param mixed $form_state
 */
function quizlet_api_form_submit($form, &$form_state) {
  drupal_flush_all_caches(); 
}
/**
 * Quizlet Search Form
 * 
 * @param mixed $form_state
 */
function quizlet_search_form($form, &$form_state, $page=1) {
  global $user;
  $output = '';
  $key = variable_get('quizlet_api_key', '');
  $token = variable_get('quizlet_access_token', ''); 
  $keywords = !empty($_GET['keywords']) ? $_GET['keywords'] : '';
  $has_images = !empty($_GET['has_images']) ? TRUE : FALSE;
  $sort =  !empty($_GET['sort']) ? $_GET['sort'] : '';
  $criteria = '';
  if (!empty($_GET['page'])) {
    $criteria .= '&page=' . ($_GET['page']+1);
  } 
  if ($has_images) {
    $criteria .= '&images_only=on';
  }
  if ($sort) {
    $criteria .= '&sort=' . $sort; 
  }  
  $url = 'https://api.quizlet.com/2.0/search/sets?client_id=' . $key . '&q=' . str_replace(' ', '+', $keywords) . '&whitespace=off' . $criteria; 
  if ($keywords) {
    $response = json_decode(quizlet_api_request($url, $token), TRUE);
    if (!$response) {
      drupal_set_message(t("Cannot communicate to server. Please try again."), 'warning'); 
    }
    else {
      $form_state['storage']['data'] = $response['sets'];
      $form_state['storage']['keywords']  = $keywords;
      $form_state['storage']['has_images']  = $has_images; 
      $form_state['storage']['sort'] = $sort;
    }
  }
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Keyword'),
    '#required' => TRUE,
    '#default_value' => !empty($form_state['storage']['keywords']) ? $form_state['storage']['keywords'] : '',
    '#description' => t(variable_get('quizlet_custom_search_description', 'Enter keyword to search on quizlet.')),
    '#size' => ($page ? 60 : 25),
  );
  $form['has_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only Show Lists with Images'),
    '#default_value' => !empty($form_state['storage']['has_images']) ? $form_state['storage']['has_images'] : '',
  );
  $options = array('most_recent' => t('Most Recent'), 'alphabetical' => t('Alphabatical'), 'most_studied' => t('Most Studied'));
  $form['sort'] = array(
    '#type' => 'radios',
    '#title' => t('Sort By'),
    '#options' => $options,
    '#default_value' => !empty($form_state['storage']['sort']) ? $form_state['storage']['sort'] : '',
  );
  $form['search'] = array(
    '#type' => 'submit',
    '#title' => t('Search'),
    '#value' => t('Search'),
  );
  if (!empty($form_state['storage']['data'])) {
    $header = array(t('Title'), t('Term Count'));
    if (variable_get('quizlet_show_creator', '')) {
      $header[] = t('Creator'); 
    }
    if (variable_get('quizlet_show_date_created', '')) {
      $header[] = t('Created'); 
    }
    if (variable_get('quizlet_show_last_modified', '')) {
      $header[] = t('Last Modified'); 
    }
    if (user_access('quizlet save', $user)) {
      $header[] =  t('Save'); 
    }
    $rows = array();
    foreach ($form_state['storage']['data'] as $key => $value) {
      $row = array();
      $row[] = l(htmlspecialchars_decode($value['title'], ENT_QUOTES), QUIZLET_PATH . '/list/' . $value['id'], array('query' => array('keywords' =>  $form_state['storage']['keywords'] . $criteria)));
      $row[] = $value['term_count'];  
      if (variable_get('quizlet_show_creator', '')) { 
        $row[] = $value['created_by'];
      }
      if (variable_get('quizlet_show_date_created', '')) { 
        $row[] = date('m-d-Y H:i', $value['created_date']); 
      } 
      if (variable_get('quizlet_show_last_modified', '')) {   
        $row[] = date('m-d-Y H:i', $value['modified_date']);
      }
      $nid = db_query("select nid from {quizlet_lists} where quizlet_id=:id", array(':id' => $value['id']))->fetchField();       
      if (user_access('quizlet save', $user) && !variable_get('quizlet_multiple_copy', '')) { 
        $row[] = l(($nid ? t('Update') : t('Save')), QUIZLET_PATH . '/save/' . $value['id'], array('query' => array('keywords' => $form_state['storage']['keywords'] . $criteria)));
      }
      else {
        $row[] = l(($nid ? t('Save New Copy') : t('Save')), QUIZLET_PATH . '/save/' . $value['id'], array('query' => array('keywords' => $form_state['storage']['keywords'] . $criteria)));       
      }     
      $rows[] = $row;
    }
    if (!empty($rows)) {
      $output .= theme('table', array('header' => $header, 'rows' => $rows)); 
      global $pager_page_array, $pager_total;
      $pager_total[0] = ceil($response['total_results']/30);
      $pager_page_array[0] = isset($_GET['page']) ? $_GET['page'] : 0;
      $output .= theme('pager', array('quantity' => 30));  
    }
    else {
      $output = t('No results found.');
    }
  }
  elseif (!empty($form_state['storage']['keywords'])) {
    $output = t('No results found.');  
  }
  $output .= quizlet_powered_by(); 
  if ($page) {
    $form['data'] = array(
      '#type' => 'item',
      '#prefix' => $output
    );
  }
  $form['#method'] = 'GET';
  $form['#action'] = url(QUIZLET_PATH . '/search');
  return $form;
}
/**
 * Quizlet search form submit.
 * 
 * @param mixed $form
 * @param mixed $form_state
 */
function quizlet_search_form_submit($form, &$form_state) {
  $key = variable_get('quizlet_api_key', '');
  $token = variable_get('quizlet_access_token', ''); 
  $keywords = $form_state['values']['keywords'];
  $has_images = !empty($_GET['has_images']) ? TRUE : FALSE;
  $url = 'https://api.quizlet.com/2.0/search/sets?client_id=' . $key . '&q=' . str_replace(' ', '+', $keywords) . '&whitespace=off';
  if ($keywords) {
    $response = json_decode(quizlet_api_request($url, $token), TRUE);
    if (!$response) {
      drupal_set_message(t("Cannot communicate to server. Please try again."), 'warning'); 
    }
    else {
      $form_state['storage']['data'] = $response['sets'];
      $form_state['storage']['keywords']  = $keywords;
      $form_state['storage']['has_images']  = $has_images; 
    }
  }
}
/**
 * Sending API Request
 * 
 * @param mixed $url
 * @param mixed $token
 */
function quizlet_api_request($url, $token) {
  $curl = curl_init($url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $token));
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  $json = curl_exec($curl);
  curl_close($curl);
  if ($json) {
    return $json;
  }
  else {
    return FALSE;
  }
}
/**
 * Getting term lists
 * 
 * @param mixed $id
 */
function quizlet_term_lists($id) {
  $criteria = '';
  if (!empty($_GET['page'])) {
    $criteria .= '&page=' . ($_GET['page']+1);
  } 
  if (!empty($_GET['has_images'])) {
    $criteria .= '&images_only=on';
  }
  if (!empty($_GET['sort'])) {
    $criteria .= '&sort=' . $_GET['sort']; 
  }
  $key = variable_get('quizlet_api_key', ''); 
  $token = variable_get('quizlet_access_token', ''); 
  $url = 'https://api.quizlet.com/2.0/sets/' . $id . '?client_id=' . $key . '&extended=on&whitespace=off';
  $backlink = l(t('Back to search results'), QUIZLET_PATH . '/search', array('query' => array('keywords' => $_GET['keywords'] . $criteria))); 
  $nid = db_query("select nid from {quizlet_lists} where quizlet_id=:id", array(':id' => $id))->fetchField();      
  $savelink = l(($nid ? t('Update this list') : t('Save this list')), QUIZLET_PATH . '/save/' . $id, array('query' => array('keywords' => $_GET['keywords'] . $criteria)));
  if (!$response = json_decode(quizlet_api_request($url, $token), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    return $backlink;
  }
  else {
    $rows = array();
    $header  = array();
    foreach ($response['terms'] as $key => $value) {
      $row = array();
      foreach ($value as $k => $v) {
        if ($k == 'image') {
          if ($v['url']) {
            $row[] = '<img src="' . $v['url'] . '" height="' . $v['height'] . '" width="' . $v['width'] . '" />';
          }
          else {
            $row[] = '';
          }
        }
        else {
          $row[] = $v;   
        }
      }
      $rows[] = $row;
    }
    return theme_render_template(
            drupal_get_path('module', 'quizlet') . '/templates/quizlet_list.tpl.php', 
            array(
             'title' => $response['title'],
             'description' => $response['description'],
             'term_count' => $response['term_count'],
             'terms' => theme('table', array('header' => $header, 'rows' => $rows)),
             'backlink' => $backlink,
             'savelink' => $savelink 
           ));
   }  
}
/**
 * Implements hook_node_info().
 */
function quizlet_node_info() {
  return array(
    'quizlet' => array(
      'name' => t('Quizlet List'),
      'base' => 'quizlet',
      'description' => t("Custom content type to store quizlet lists"),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'body_label' => t('Description'),
      'has_body' => TRUE,
    ),
    'quizlet_private' => array(
      'name' => t('Quizlet Private'),
      'base' => 'quizlet_private',
      'description' => t("Custom content type to store quizlet group lists"),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'body_label' => t('Description'),
      'has_body' => TRUE,
    )
  );
}
/**
 * Implements hook_form().
 */
function quizlet_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => !empty($node->body) ? $node->body : '',
    '#required' => FALSE,
  );
  $form['quizlet_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Quizlet ID'),
    '#default_value' => !empty($node->quizlet_id) ? $node->quizlet_id : '',
    '#required' => TRUE,
    '#access' => FALSE,
  );
  $form['quizlet_data'] = array(
    '#type' => 'textarea',
    '#title' => t('Quizlet Data'),
    '#default_value' => !empty($node->quizlet_data) ? $node->quizlet_data : '',
    '#required' => FALSE,
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );
  return $form;
}
//Quizlet Private List
function quizlet_private_form(&$node, $form_state) {
  return quizlet_form($node, $form_state);
}
/**
 * Implements hook_load().
 */
function quizlet_load($nodes) {  
  $result = db_query("SELECT nid, quizlet_id, quizlet_data FROM {quizlet_lists} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->quizlet_id = $record->quizlet_id;
    $nodes[$record->nid]->quizlet_data = $record->quizlet_data;
  }
}
//Quizlet Private List
function quizlet_private_load($nodes) {
  $result = db_query("SELECT nid, quizlet_id, quizlet_data FROM {quizlet_private_lists} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->quizlet_id = $record->quizlet_id;
    $nodes[$record->nid]->quizlet_data = $record->quizlet_data;
  }
}
/**
 * Implements hook_insert().
 */
function quizlet_insert($node) {
  $nid = db_insert('quizlet_lists')
  ->fields(array(
    'nid' => $node->nid,
    'quizlet_id' => $node->quizlet_id,
    'quizlet_data' => $node->quizlet_data,
  ))
  ->execute();
}
//Quizlet Private List Insert
function quizlet_private_insert($node) {
  $nid = db_insert('quizlet_private_lists')
  ->fields(array(
    'nid' => $node->nid,
    'quizlet_id' => $node->quizlet_id,
    'quizlet_data' => $node->quizlet_data,
  ))
  ->execute();
}
/**
 * Implements hook_update().
 */
function quizlet_update($node) {
  db_update('quizlet_lists')
    ->fields(array('quizlet_data' => $node->quizlet_data))
    ->condition('nid', $node->nid)
    ->execute();
}
//Quizlet Private List Update
function quizlet_private_update($node) {
  db_update('quizlet_private_lists')
    ->fields(array('quizlet_data' => $node->quizlet_data))
    ->condition('nid', $node->nid)
    ->execute();
}
/**
 * Implements hook_delete().
 */
function quizlet_delete($node) { 
  db_delete('quizlet_lists')
    ->condition('nid', $node->nid)
    ->execute(); 
}
function quizlet_private_delete($node) {
  db_delete('quizlet_private_lists')
    ->condition('nid', $node->nid)
    ->execute();  
}
/**
 * Implements hook_view().
 *
 * @param $block
 */
function quizlet_view($node, $view_mode) {
  global $user;
  $quizlet_data = unserialize($node->quizlet_data);
  $rows = array();
  $header  = array();
  foreach ($quizlet_data as $key => $value) {
    $row = array();
    foreach ($value as $k => $v) {
      if ($k == 'image') {
        if ($v['url']) {
          $row[] = '<img src="' . $v['url'] . '" height="' . $v['height'] . '" width="' . $v['width'] . '" />';
        }
        else {
          $row[] = '';
        }
      }
      else {
        $row[] = $v;   
      }
    }
    $rows[] = $row;
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows)); 
  $node->content['quizlet_data'] = array(
    '#markup' => '<div class="quizet_list"><div class="quizlet_terms_title"><b>' . t('Terms') . ' : </b><a href="javascript:void(0);" id="quizlet_images">Hide Images</a></div>' . $output . '</div>' . drupal_render(drupal_get_form('quizlet_selection_cards', $node)) . quizlet_powered_by(), 
    '#weight' => 3,
  );
  return $node;
}
//Quizlet Private List View
function quizlet_private_view($node, $teaser = FALSE, $page = FALSE, $block = FALSE) {
  return quizlet_view($node, $teaser = FALSE, $page = FALSE, $block = FALSE);
}
/**
 * Save quizlet lists
 * 
 * @param mixed $id
 */
function quizlet_terms_save($id) {
  global $user;
  $criteria = '';
  if (!empty($_GET['page'])) {
    $criteria .= '&page=' . ($_GET['page']+1);
  } 
  if (!empty($_GET['has_images'])) {
    $criteria .= '&images_only=on';
  }
  if (!empty($_GET['sort'])) {
    $criteria .= '&sort=' . $_GET['sort']; 
  }
  $key = variable_get('quizlet_api_key', ''); 
  $token = variable_get('quizlet_access_token', ''); 
  $url = 'https://api.quizlet.com/2.0/sets/' . $id . '?client_id=' . $key . '&extended=on&whitespace=off';
  
  if (!$response = json_decode(quizlet_api_request($url, $token), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    drupal_goto(QUIZLET_PATH . '/search', 'keywords=' . $_GET['keywords'] . $criteria);
  }
  else {
    $nid = db_query("select nid from {quizlet_lists} where quizlet_id=:id", array(':id' => $id))->fetchField(); 
    if ($nid && !variable_get('quizlet_multiple_copy', '')) {
      $node = node_load($nid);
      $node->changed = REQUEST_TIME;
      $node->title = htmlspecialchars_decode($response['title'], ENT_QUOTES);
      $node->body[$node->language][0]['value']   = $response['description'];
      $node->body[$node->language][0]['summary'] = text_summary($response['description']);
      $node->body[$node->language][0]['format']  = 2;
      $node->quizlet_data = serialize($response['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet list updated successfully.'));
    }
    else {
      $node = new stdClass();
      $node->type = 'quizlet';
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);  
      $node->status = 1;
      $node->uid = $user->uid;
      $node->created = REQUEST_TIME;
      $node->changed = REQUEST_TIME;
      $node->title = htmlspecialchars_decode($response['title'], ENT_QUOTES);
      $node->body[$node->language][0]['value']   = $response['description'];
      $node->body[$node->language][0]['summary'] = text_summary($response['description']);
      $node->body[$node->language][0]['format']  = 2;
      $node->quizlet_data = serialize($response['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet list saved successfully.'));  
    }
    drupal_goto('node/' . $node->nid);  
  }
}
/**
 * Saved lists
 * 
 */
function quizlet_lists() {
  global $user;
  $total = 30;
  drupal_set_title(t(variable_get('quizlet_custom_list_title', 'Most Recently Saved Quizlet Vocabulary Lists')));
  $header = array(
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'),
    array('data' => t('Changed'), 'field' => 'changed')
  );
  if (user_access('delete any quizlet content', $user)) {
    $header[] =  t('Delete'); 
  }
  $query = db_select('node', 'n')->extend('TableSort')->extend('PagerDefault');
  $results = $query->fields('n', array('nid'))->condition('type', 'quizlet')->limit($total)->orderByHeader($header)->execute();
  $rows = array();
  foreach ($results as $result) {
    $row = array();
    $node = node_load($result->nid); 
    $row[] = l($node->title, 'node/' . $result->nid);
    $row[] = date('m-d-Y H:i', $node->created);   
    $row[] = date('m-d-Y H:i', $node->changed);
    if (user_access('delete any quizlet content', $user)) {  
      $row[] = l(t('Delete'), 'node/' . $node->nid . '/delete', array('query' => array('destination' => 'quizlet'))); 
    }
    $rows[] = $row;
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= theme('pager', array('quantity' => $total));
  $output .= quizlet_powered_by();
  return $output;
}
/**
 * Powered by Quizlet
 */
function quizlet_powered_by() {
  return '<div class="quizlet_link"><a href="http://quizlet.com/"><b>Powered by Quizlet.com</b></a></div>';
}
/**
 * Access to flashcard nodes
 * 
 * @param mixed $node
 */
function quizlet_flashcards_viewaccess($node) {
  global $user;
  if ($node->type == 'quizlet' && user_access('view flashcards', $user)) {
    return TRUE;  
  }
  elseif ($node->type == 'quizlet_private'  && user_access('view flashcards', $user)) {
    return TRUE;
  }
  else {
    return FALSE; 
  }
}
/**
 * Quizlet embedded charts
 * 
 * @param mixed $node
 * @param mixed $type
 */
function quizlet_terms_embeddedcards($node, $type) {
  if ($type=='learn') {
    $url = 'http://quizlet.com/' . $node->quizlet_id . '/learn/embedv2/?hideLinks';  
    $height = 480;
  }
  elseif ($type=='scatter')   {
    $url = 'http://quizlet.com/' . $node->quizlet_id . '/scatter/embedv2/?hideLinks';  
    $height = 520; 
  }
  else {
    $url = 'http://quizlet.com/' . $node->quizlet_id . '/familiarize/embedv2/?hideLinks';  
    $height = 350;
  }
  return theme_render_template(drupal_get_path('module', 'quizlet') . '/templates/embedded_cards.tpl.php', array('url' => $url, 'height' => $height));
}
/**
 * Selection of cards
 * 
 * @param mixed $form_state
 * @param mixed $node
 */
function quizlet_selection_cards($form, &$form_state, $node) {
  $flashcard = url('node/' . $node->nid . '/flashcards', array('absolute' => TRUE));
  $learn = url('node/' . $node->nid . '/learn', array('absolute' => TRUE));
  $scatter = url('node/' . $node->nid . '/scatter', array('absolute' => TRUE));
  $options = array('' => t('Please select'), $flashcard => t('Flashcard'), $learn => t('Learn'), $scatter => t('Scatter'));
  $form['select_card'] = array(
    '#type' => 'select', 
    '#title' => 'Select card',
    '#options' => $options,
  );
  return $form;
}
/**
 * Implements hook_block_info().
 * Search vicabulary block
 */
function quizlet_block_info() {
  $blocks['searchvocabulary'] = array(
    'info' => t('Search Vocabulary Lists by Keyword'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 * 
 * @param mixed $delta
 */
function quizlet_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'searchvocabulary':
      $block['subject'] = t('Keyword Search for Vocabulary Lists');
      $block['content'] = drupal_render(drupal_get_form('quizlet_search_form', 0));
      break;
  }
  return $block;
}
/**
 * Quizlet API get token form.
 * 
 * @param mixed $form_state
 */
function quizlet_api_token_form($form_state = array()) {
  $clientid = variable_get('quizlet_api_key', '');
  $secretkey = variable_get('quizlet_secret_key', ''); 
  if (empty($clientid) || empty($secretkey)) {
    form_set_error('', 'Please enter client id and secret key first.'); 
    drupal_goto('admin/config/services/quizlet');
  }
  $accesstoken = variable_get('quizlet_access_token', '');
  $siteurl = url('admin/config/services/quizlet/token', array('absolute' => TRUE)); 
  $authorizeUrl = "https://quizlet.com/authorize/?client_id={$clientid}&response_type=code&scope=read%20write_set";
  $tokenUrl = 'https://api.quizlet.com/oauth/token';
  if (empty($_GET['code']) && empty($_GET['error']) && empty($accesstoken)) {
    $_SESSION['state'] = md5(mt_rand() . microtime(true));    
    $form['path'] = array(
      '#type' => 'value',
      '#prefix' => '<a href="' . $authorizeUrl . '&state=' . $_SESSION['state'] . '&redirect_uri=' . $siteurl . '">Authorize Site First</a>'
    );
  }
  if (!empty($_GET['error'])) { // An error occurred authorizing
    form_set_error('path', 'Error:' . $_GET['error']);
  }
  if (empty($accesstoken) && !empty($_GET['code'])) { 
    $payload = array(
      'code' => $_GET['code'],
      'redirect_uri' => $siteurl,
      'grant_type' => 'authorization_code'
    );
    $curl = curl_init($tokenUrl);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($curl, CURLOPT_USERPWD, "{$clientid}:{$secretkey}");
    curl_setopt($curl, CURLOPT_POST, TRUE);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $payload);
    $token = json_decode(curl_exec($curl), TRUE);
    $responseCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
    if ($responseCode != 200) { // An error occurred getting the token
      form_set_error('path', 'Error:' . $token['error']); 
    }
  }
  $form['quizlet_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Token'),
    '#default_value' => variable_get('quizlet_access_token', (!empty($token['access_token']) ? $token['access_token'] : '')),
    '#required' => TRUE,
    '#attributes' => array('readonly' => 'readonly'),
  );
  return system_settings_form($form); 
}
/**
 * Group search form.
 * 
 * @param mixed $form_state
 */
function quizlet_group_form($form, &$form_state) {
  global $user;
  $output = '';
  $token = variable_get('quizlet_access_token', '');
  $group_id = !empty($_GET['group_id']) ? $_GET['group_id'] : '';
  $url = 'https://api.quizlet.com/2.0/groups/' . $group_id . '/sets';
  if ($group_id) {
    $response = json_decode(quizlet_api_request($url, $token), TRUE);
    if (!$response) {
      drupal_set_message(t("Cannot communicate to server. Please try again."), 'warning'); 
    }
    else {
      $form_state['storage']['group_id'] = $group_id;
      $form_state['storage']['data'] = $response;
    }
  }
  $form['group_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Group ID'),
    '#required' => TRUE,
    '#default_value' => !empty($form_state['storage']['group_id']) ? $form_state['storage']['group_id'] : '',
    '#description' => t('Enter group id to get data'),
  );
  $form['search'] = array(
    '#type' => 'submit',
    '#title' => t('Search'),
    '#value' => t('Search'),
  );
  if (!empty($form_state['storage']['data'])) {
    $header = array(t('Title'), t('Term Count'), t('Save'));
    $rows = array();
    foreach ($form_state['storage']['data'] as $key => $value) {
      $row = array();
      $row[] = l($value['title'], QUIZLET_PATH . '/group/list/' . $value['id'], array('query' => array('group_id' => $group_id)));
      $row[] = $value['term_count'];
      $row[] = l('Save', QUIZLET_PATH . '/group/save/' . $value['id'],  array('query' => array('group_id' => $group_id)));
      $rows[] = $row;
    }
    if (!empty($rows)) {
      $output = theme('table', array('header' => $header, 'rows' => $rows)); 
    }
    else {
      $output = t('No results found.');
    }
  }
  elseif (!empty($form_state['storage']['group_id'])) {
    $output = t('No results found.');  
  }
  $form['data'] = array(
    '#type' => 'item',
    '#prefix' => $output
  );
  $form['#method'] = 'GET';
  $form['#action'] = url(QUIZLET_PATH . '/group');
  return $form;
}
/**
 * Show quizlet group list details.
 * 
 * @param mixed $set_id
 */
function quizlet_group_term_lists($set_id) {
  $key = variable_get('quizlet_api_key', ''); 
  $token = variable_get('quizlet_access_token', '');
  $url = 'https://api.quizlet.com/2.0/sets/' . $set_id . '?client_id=' . $key . '&extended=on&whitespace=off';
  $backlink = l(t('Back to group'), QUIZLET_PATH . '/group', array('query' => 'group_id=' . $_GET['group_id']));
  $nid = db_query("select nid from {quizlet_lists} where quizlet_id=:id", array(':id' => $set_id))->fetchField();       
  $savelink = l(($nid ? t('Update this list') : t('Save this list')), QUIZLET_PATH . '/group/save/' . $set_id, array('query' => 'group_id=' . $_GET['group_id'] . $criteria));
  if (!$response = json_decode(quizlet_api_request($url, $token), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    return $backlink;
  }
  else {
    $rows = array();
    $header  = array();
    foreach ($response['terms'] as $key => $value) {
      $row = array();
      foreach ($value as $k => $v) {
        if ($k == 'image') {
          if ($v['url']) {
            $row[] = '<img src="' . $v['url'] . '" height="' . $v['height'] . '" width="' . $v['width'] . '" />';
          }
          else {
            $row[] = '';
          }
        }
        else {
          $row[] = $v;   
        }
      }
      $rows[] = $row;
    }
    return theme_render_template(
            drupal_get_path('module', 'quizlet') . '/templates/quizlet_list.tpl.php', 
            array(
             'title' => $response['title'],
             'description' => $response['description'],
             'term_count' => $response['term_count'],
             'terms' => theme('table', array('header' => $header, 'rows' => $rows)),
             'backlink' => $backlink,
             'savelink' => $savelink 
           ));
   }  
}
/**
 * Save quizlet group lists.
 * 
 * @param mixed $id
 */
function quizlet_group_terms_save($id) {
  global $user;
  $key = variable_get('quizlet_api_key', ''); 
  $token = variable_get('quizlet_access_token', '');
  $url = 'https://api.quizlet.com/2.0/sets/' . $id . '?client_id=' . $key . '&extended=on&whitespace=off';
  if (!$response = json_decode(quizlet_api_request($url, $token), TRUE)) {
    drupal_set_message(t("Cannot communicate with server"), 'error');
    drupal_goto(QUIZLET_PATH . '/group', 'group_id=' . $_GET['group_id']);
  }
  else {
    $nid = db_query("select nid from {quizlet_private_lists} where quizlet_id=:id", array(':id' => $id))->fetchField(); 
    if ($nid && !variable_get('quizlet_multiple_copy', '')) {
      $node = node_load($nid);
      $node->changed = REQUEST_TIME;
      $node->title = htmlspecialchars_decode($response['title'], ENT_QUOTES);
      $node->body['und'][0]['value']   = $response['description'];
      $node->body['und'][0]['summary'] = text_summary($response['description']);
      $node->body['und'][0]['format']  = 2;
      $node->quizlet_data = serialize($response['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet private list updated successfully.'));
    }
    else {
      $node = new stdClass();
      $node->language = LANGUAGE_NONE; 
      $node->type = 'quizlet_private';
      node_object_prepare($node);
      $node->status = 1;
      $node->uid = $user->uid;
      $node->created = REQUEST_TIME;
      $node->changed = REQUEST_TIME;
      $node->title = htmlspecialchars_decode($response['title'], ENT_QUOTES);
      $node->body[$node->language][0]['value']   = $response['description'];
      $node->body[$node->language][0]['summary'] = text_summary($response['description']);
      $node->body[$node->language][0]['format']  = 2;
      $node->quizlet_data = serialize($response['terms']);
      $node->quizlet_id = $id;
      node_save($node);
      drupal_set_message(t('Quizlet private list saved successfully.'));  
    } 
    drupal_goto('node/' . $node->nid);  
  }
}

/**
 * Search form widget called anywhere with below settings
 * $settings = array(
 *    'title' => "Textfield Label",
 *    'description' => "Textfield description.",
 *    'text_class' => "Textfield Class",
 *    'field_title' => "Textfield title",
 *    'button_value' => "Button text value",
 *    'button_class' => "Button class",
 *    'prefix' => "Html before form",
 *    'suffix' => "Html after form"
 *  );
 */
function quizlet_search_widget($settings = array()){
  return drupal_render(drupal_get_form('quizlet_search_widget_form', $settings));	
}

/** 
 * Quizlet widget serach form
 */
function quizlet_search_widget_form($form_state = array(), $args) {
  $settings = $args['build_info']['args'][0];
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => $settings['title'],
    '#required' => TRUE,
    '#description' => $settings['description'],
    '#attributes' => array('class' => $settings['text_class'], 'title' => $settings['field_title']),
    '#theme_wrappers' => FALSE,
  );
  $form['search'] = array(
    '#type' => 'submit',
    '#title' => $settings['button_value'] ? $settings['button_value'] : t('Search'),
    '#value' => $settings['button_value'] ? $settings['button_value'] : t('Search'),
    '#attributes' => array('class' => $settings['button_class']),
  );
  $form['#prefix'] = $settings['prefix'];
  $form['#suffix'] = $settings['suffix'];
  $form['#method'] = 'GET';
  $form['#action'] = url(QUIZLET_PATH . '/search');
  return $form;	
}
